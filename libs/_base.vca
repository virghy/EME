SccTextX Version 1.0.0.1
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Class     
[START RESERVED1]
VERSION =   3.00[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RKG0Z8AU6
[CLASS] activedoc
[BASECLASS] activedoc
[OBJNAME] _activedoc
[START PROPERTIES]
Height = 68
Name = "_activedoc"
Width = 68
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation ActiveDoc class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _activedoc

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TJIMM
[CLASS] checkbox
[BASECLASS] checkbox
[OBJNAME] _checkbox
[START PROPERTIES]
Caption = "Check1"
Height = 17
Name = "_checkbox"
Width = 60
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation CheckBox class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _checkbox
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TJUI1
[CLASS] combobox
[BASECLASS] combobox
[OBJNAME] _combobox
[START PROPERTIES]
Height = 24
Name = "_combobox"
Width = 100
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation ComboBox class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _combobox
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TK41Y
[CLASS] commandbutton
[BASECLASS] commandbutton
[OBJNAME] _commandbutton
[START PROPERTIES]
Caption = "Command1"
Height = 27
Name = "_commandbutton"
Width = 84
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation CommandButton class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _commandbutton
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TKWGH
[CLASS] commandgroup
[BASECLASS] commandgroup
[OBJNAME] _commandgroup
[START PROPERTIES]
AND2.Caption = "Command2"
ButtonCount = 2
COMMAND1.Caption = "Command1"
Comm
Command1.Height = 27
Command1.Left = 5
Command1.Name = "Command1"
Command1.Top = 5
Command1.Width = 84
Command2.Height = 27
Command2.Left = 5
Command2.Name = "Command2"
Command2.Top = 34
Command2.Width = 84
Height = 66
Name = "_commandgroup"
Value = 1
Width = 94
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation CommandGroup class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _commandgroup
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TL694
[CLASS] container
[BASECLASS] container
[OBJNAME] _container
[START PROPERTIES]
Height = 200
Name = "_container"
Width = 200
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Container class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _container

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RSL0XGTQR
[CLASS] control
[BASECLASS] control
[OBJNAME] _control
[START PROPERTIES]
Height = 22
Name = "_control"
Width = 24
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _control

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TLOXD
[CLASS] custom
[BASECLASS] custom
[OBJNAME] _custom
[START PROPERTIES]
Height = 22
Name = "_custom"
Width = 24
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Custom class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _custom

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TM5BE
[CLASS] editbox
[BASECLASS] editbox
[OBJNAME] _editbox
[START PROPERTIES]
Height = 53
Name = "_editbox"
Width = 100
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation EditBox class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _editbox
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TMEE8
[CLASS] form
[BASECLASS] form
[OBJNAME] _form
[START PROPERTIES]
Caption = "Form1"
DoCreate = .T.
Name = "_form"
ShowWindow = 1
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Form class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _form
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TMNOX
[CLASS] formset
[BASECLASS] formset
[OBJNAME] _formset
[START PROPERTIES]
Name = "_formset"
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
2[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED7]
Foundation FormSet class.[END RESERVED7]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TMNQY
[CLASS] form
[BASECLASS] form
[OBJNAME] Form1
[PARENT] _formset
[START PROPERTIES]
Caption = "Form1"
DoCreate = .T.
Name = "Form1"
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START METHODS]
PROCEDURE Release
RELEASE THIS
ENDPROC
**
[END METHODS]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _formset
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TN1LS
[CLASS] grid
[BASECLASS] grid
[OBJNAME] _grid
[START PROPERTIES]
Height = 200
Name = "_grid"
Width = 320
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Grid class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _grid
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RKG0Z69ZT
[CLASS] hyperlink
[BASECLASS] hyperlink
[OBJNAME] _hyperlink
[START PROPERTIES]
Height = 23
Name = "_hyperlink"
Width = 23
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Hyperlink class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _hyperlink

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TNH5N
[CLASS] image
[BASECLASS] image
[OBJNAME] _image
[START PROPERTIES]
Height = 68
Name = "_image"
Width = 68
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Image class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _image

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TNO1H
[CLASS] label
[BASECLASS] label
[OBJNAME] _label
[START PROPERTIES]
Caption = "Label1"
Height = 16
Name = "_label"
Width = 40
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Label class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _label

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TO4SH
[CLASS] line
[BASECLASS] line
[OBJNAME] _line
[START PROPERTIES]
Height = 68
Name = "_line"
Width = 68
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Line class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _line

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TOFY3
[CLASS] listbox
[BASECLASS] listbox
[OBJNAME] _listbox
[START PROPERTIES]
Height = 170
Name = "_listbox"
Width = 100
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Listbox class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _listbox
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TORHM
[CLASS] optionbutton
[BASECLASS] optionbutton
[OBJNAME] _optionbutton
[START PROPERTIES]
Caption = "Option1"
Height = 17
Name = "_optionbutton"
Width = 61
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation OptionButton class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _optionbutton
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TP4MN
[CLASS] optiongroup
[BASECLASS] optiongroup
[OBJNAME] _optiongroup
[START PROPERTIES]
ButtonCount = 2
Height = 46
Name = "_optiongroup"
OPTION1.Caption = "Option1"
OPTION1.Value = 1
OPTION2.Caption = "Option2"
Option1.Height = 17
Option1.Left = 5
Option1.Name = "Option1"
Option1.Top = 5
Option1.Width = 61
Option2.Height = 17
Option2.Left = 5
Option2.Name = "Option2"
Option2.Top = 24
Option2.Width = 61
Value = 1
Width = 71
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation OptionGroup class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _optiongroup
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TQPLW
[CLASS] pageframe
[BASECLASS] pageframe
[OBJNAME] _pageframe
[START PROPERTIES]
ErasePage = .T.
Height = 169
Name = "_pageframe"
PAGE1.Caption = "Page1"
PAGE2.Caption = "Page2"
Page1.Name = "Page1"
Page2.Name = "Page2"
PageCount = 2
Width = 241
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation PageFrame class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _pageframe

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RML0XWL1D
[CLASS] projecthook
[BASECLASS] projecthook
[OBJNAME] _projecthook
[START PROPERTIES]
Height = 68
Name = "_projecthook"
Width = 68
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation ProjectHook class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _projecthook

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TQZT5
[CLASS] separator
[BASECLASS] separator
[OBJNAME] _separator
[START PROPERTIES]
Height = 0
Name = "_separator"
Width = 0
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Separator class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _separator

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TRAT8
[CLASS] shape
[BASECLASS] shape
[OBJNAME] _shape
[START PROPERTIES]
Height = 68
Name = "_shape"
Width = 68
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Shape class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _shape

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TRNAK
[CLASS] spinner
[BASECLASS] spinner
[OBJNAME] _spinner
[START PROPERTIES]
Height = 24
Name = "_spinner"
Width = 120
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Spinner class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _spinner
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TRWLB
[CLASS] textbox
[BASECLASS] textbox
[OBJNAME] _textbox
[START PROPERTIES]
Height = 23
Name = "_textbox"
Width = 100
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation TextBox class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _textbox
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 13, 3, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TSAN0
[CLASS] timer
[BASECLASS] timer
[OBJNAME] _timer
[START PROPERTIES]
Height = 23
Name = "_timer"
Width = 23
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Timer class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _timer

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RFH0TSJRX
[CLASS] toolbar
[BASECLASS] toolbar
[OBJNAME] _toolbar
[START PROPERTIES]
Caption = "Toolbar1"
Name = "_toolbar"
ShowWindow = 1
builder = 
builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
cversion = 
ninstances = 0
nobjectrefcount = 0
ohost = .NULL.
vresult = .T.
[END PROPERTIES]
[START PROTECTED]
addtoproject
[END PROTECTED]
[START METHODS]
PROCEDURE addtoproject
RETURN
DO SetObjRf.prg
ENDPROC
**
FUNCTION ninstances_access
LOCAL LAINSTANCES[1]
RETURN AINSTANCE(LAINSTANCES, THIS.CLASS)
ENDFUNC
**
PROCEDURE ninstances_assign
LPARAMETERS VNEWVAL
ERROR 1743
ENDPROC
**
FUNCTION Error
LPARAMETERS NERROR, CMETHOD, NLINE
LOCAL LCONERROR, LCERRORMSG, LCCODELINEMSG
IF THIS.LIGNOREERRORS
RETURN .F.
ENDIF
LCONERROR = UPPER(ALLTRIM(ON("ERROR")))
IF  .NOT. EMPTY(LCONERROR)
LCONERROR = STRTRAN(STRTRAN(STRTRAN(LCONERROR, "ERROR()", "nError"), "PROGRAM()", "cMethod"), "LINENO()", "nLine")
&LCONERROR
RETURN
ENDIF
LCERRORMSG = MESSAGE()+CHR(13)+CHR(13)+THIS.NAME+CHR(13)+"Error:           "+ALLTRIM(STR(NERROR))+CHR(13)+"Method:       "+LOWER(ALLTRIM(CMETHOD))
LCCODELINEMSG = MESSAGE(1)
IF BETWEEN(NLINE, 1, 100000) .AND.  .NOT. LCCODELINEMSG="..."
LCERRORMSG = LCERRORMSG+CHR(13)+"Line:            "+ALLTRIM(STR(NLINE))
IF  .NOT. EMPTY(LCCODELINEMSG)
LCERRORMSG = LCERRORMSG+CHR(13)+CHR(13)+LCCODELINEMSG
ENDIF
ENDIF
WAIT CLEAR
MESSAGEBOX(LCERRORMSG, 16, _SCREEN.CAPTION)
ERROR NERROR
ENDFUNC
**
FUNCTION Init
IF THIS.LSETHOST
THIS.SETHOST
ENDIF
IF THIS.LAUTOSETOBJECTREFS .AND.  .NOT. THIS.SETOBJECTREFS(THIS)
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION Destroy
IF THIS.LRELEASE
RETURN .F.
ENDIF
THIS.LRELEASE = .T.
THIS.RELEASEOBJREFS
THIS.OHOST = .NULL.
ENDFUNC
**
PROCEDURE nobjectrefcount_assign
LPARAMETERS M.VNEWVAL
ERROR 1743
ENDPROC
**
PROCEDURE releaseobjrefs
LOCAL LCNAME, OOBJECT, LNCOUNT
IF THIS.NOBJECTREFCOUNT=0
RETURN
ENDIF
FOR LNCOUNT = THIS.NOBJECTREFCOUNT TO 1 STEP -1
LCNAME = THIS.AOBJECTREFS(LNCOUNT, 1)
IF EMPTY(LCNAME) .OR.  .NOT. PEMSTATUS(THIS, LCNAME, 5) .OR. TYPE("this."+LCNAME)<>"O"
LOOP
ENDIF
OOBJECT=THIS.&LCNAME
IF ISNULL(OOBJECT)
LOOP
ENDIF
IF TYPE("oObject")=="O" .AND.  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "Release", 5)
OOBJECT.RELEASE
ENDIF
IF  .NOT. ISNULL(OOBJECT) .AND. PEMSTATUS(OOBJECT, "oHost", 5)
OOBJECT.OHOST = .NULL.
ENDIF
THIS.&LCNAME=.NULL.
OOBJECT = .NULL.
ENDFOR
DIMENSION THIS.AOBJECTREFS[1, 3]
THIS.AOBJECTREFS = ""
ENDPROC
**
FUNCTION nobjectrefcount_access
LOCAL LNOBJECTREFCOUNT
LNOBJECTREFCOUNT = ALEN(THIS.AOBJECTREFS, 1)
IF LNOBJECTREFCOUNT=1 .AND. EMPTY(THIS.AOBJECTREFS(1))
LNOBJECTREFCOUNT = 0
ENDIF
RETURN LNOBJECTREFCOUNT
ENDFUNC
**
PROCEDURE sethost
THIS.OHOST = IIF(TYPE("thisform")=="O", THISFORM, .NULL.)
ENDPROC
**
FUNCTION newinstance
LPARAMETERS TNDATASESSIONID
LOCAL ONEWOBJECT, LNLASTDATASESSIONID
LNLASTDATASESSIONID = SET("DATASESSION")
IF TYPE("tnDataSessionID")=="N" .AND. TNDATASESSIONID>=1
SET DATASESSION TO TNDATASESSIONID
ENDIF
ONEWOBJECT = NEWOBJECT(THIS.CLASS, THIS.CLASSLIBRARY)
SET DATASESSION TO (LNLASTDATASESSIONID)
RETURN ONEWOBJECT
ENDFUNC
**
PROCEDURE setobjectrefs
LPARAMETERS TOOBJECT
RETURN
ENDPROC
**
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addtoproject Dummy code for adding files to project.
*newinstance Returns new instance of object.
*ninstances_access 
*ninstances_assign 
*nobjectrefcount_access Access method for nObjectRefCount property.
*nobjectrefcount_assign Assign method for nObjectRefCount property.
*release Releases object from memory.
*releaseobjrefs Releases all object references of aObjectRefs array.
*sethost Set oHost property to form reference object.
*setobjectref Set object reference to specific property.
*setobjectrefs Place holder method for listing SetObjectRef method calls.
^aobjectrefs[1,3] Array of object references properties.
builder Bulder property.
builderx BuilderX property.
csetobjrefprogram Program to be called when when setting an object references via the SetObjectRef method.
cversion Version property.
lautobuilder Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
lautosetobjectrefs Specifiies if the SetObjectRefs method is automatically called from the Init method.
lignoreerrors Specifies if the default FFC error handler is executed when an error occurs.
lrelease Indicates the object's Release method has been executed and the object is in the process of being released from memory.
lsethost Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
ninstances
nobjectrefcount Returns the number of items in the object reference array property aObjectRefs.
ohost Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
vresult Variant result property for internal usage when calling programs in PRGs and a return file is required.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Foundation Toolbar class.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _toolbar
[EOF]
